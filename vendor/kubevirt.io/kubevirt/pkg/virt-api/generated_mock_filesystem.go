// Automatically generated by MockGen. DO NOT EDIT!
// Source: filesystem.go

package virt_api

import (
	os "os"

	gomock "github.com/golang/mock/gomock"
)

// Mock of File interface
type MockFile struct {
	ctrl     *gomock.Controller
	recorder *_MockFileRecorder
}

// Recorder for MockFile (not exported)
type _MockFileRecorder struct {
	mock *MockFile
}

func NewMockFile(ctrl *gomock.Controller) *MockFile {
	mock := &MockFile{ctrl: ctrl}
	mock.recorder = &_MockFileRecorder{mock}
	return mock
}

func (_m *MockFile) EXPECT() *_MockFileRecorder {
	return _m.recorder
}

func (_m *MockFile) Close() error {
	ret := _m.ctrl.Call(_m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockFileRecorder) Close() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Close")
}

func (_m *MockFile) Write(p []byte) (int, error) {
	ret := _m.ctrl.Call(_m, "Write", p)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockFileRecorder) Write(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Write", arg0)
}

// Mock of Filesystem interface
type MockFilesystem struct {
	ctrl     *gomock.Controller
	recorder *_MockFilesystemRecorder
}

// Recorder for MockFilesystem (not exported)
type _MockFilesystemRecorder struct {
	mock *MockFilesystem
}

func NewMockFilesystem(ctrl *gomock.Controller) *MockFilesystem {
	mock := &MockFilesystem{ctrl: ctrl}
	mock.recorder = &_MockFilesystemRecorder{mock}
	return mock
}

func (_m *MockFilesystem) EXPECT() *_MockFilesystemRecorder {
	return _m.recorder
}

func (_m *MockFilesystem) WriteFile(filename string, data []byte, perm os.FileMode) error {
	ret := _m.ctrl.Call(_m, "WriteFile", filename, data, perm)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockFilesystemRecorder) WriteFile(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "WriteFile", arg0, arg1, arg2)
}

func (_m *MockFilesystem) TempDir(dir string, prefix string) (string, error) {
	ret := _m.ctrl.Call(_m, "TempDir", dir, prefix)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockFilesystemRecorder) TempDir(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "TempDir", arg0, arg1)
}

func (_m *MockFilesystem) OpenFile(name string, flag int, perm os.FileMode) (File, error) {
	ret := _m.ctrl.Call(_m, "OpenFile", name, flag, perm)
	ret0, _ := ret[0].(File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockFilesystemRecorder) OpenFile(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "OpenFile", arg0, arg1, arg2)
}
